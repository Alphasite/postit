
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
    }
}

apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

subprojects {subproject ->
    apply plugin: 'java'
    apply plugin: 'info.solidsoft.pitest'
    apply plugin: 'findbugs'

    sourceCompatibility = 1.8

    pitest {
        targetClasses = ['postit.*']  //by default "${project.group}.*"
        pitestVersion = "1.1.0" //not needed when a default PIT version should be used
        threads = 4
        outputFormats = ['XML', 'HTML']
        reportDir = "build/reports/pit"
        excludedClasses = ['postit.server.*']
        avoidCallsTo = ['postit.server.*']
    }

    findbugsMain {
        ignoreFailures = true

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    findbugsTest {
        ignoreFailures = true
        reportLevel = "high"

        reports {
            xml.enabled = false
            html.enabled = false
        }
    }

    dependencies {
        // Use JUnit test framework
        testCompile 'junit:junit:4.12'
        testCompile 'commons-io:commons-io:2.5'

        testCompile project(':testUtilities')
        testRuntime project(':testUtilities')
    }

    apply plugin: "jacoco"

    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

allprojects {
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
            showStandardStreams true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}