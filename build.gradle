
buildscript {
    repositories {
        mavenCentral()
        //Needed only for SNAPSHOT versions
        //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
    }
}

subprojects {
    // Apply the java plugin to add support for Java
    apply plugin: 'java'

    // Apply the application plugin to add support for building an application
    apply plugin: "info.solidsoft.pitest"
    apply plugin: "jacoco"
    //apply plugin: 'findbugs'

    apply plugin: 'idea'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }


    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
    }

    dependencies {
        // Client Dependencies
        compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
        compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
        compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.56'

        // Use JUnit test framework
        testCompile 'junit:junit:4.12'
        testCompile 'commons-io:commons-io:2.5'
    }

    sourceCompatibility = 1.8

    pitest {
        targetClasses = ['postit.*']  //by default "${project.group}.*"
        pitestVersion = "1.1.0" //not needed when a default PIT version should be used
        threads = 4
        outputFormats = ['XML', 'HTML']
        reportDir = "build/reports/pit"
        excludedClasses = ['postit.server.*']
        avoidCallsTo = ['postit.server.*']
    }

    /*findbugsMain {
        ignoreFailures = true

        reports {
            xml.enabled = false
            html.enabled = true
        }
    }*/

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
            showStandardStreams true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}